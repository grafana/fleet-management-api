// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: collector/v1/collector.proto

package collectorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/fleet-management-api/api/gen/proto/go/collector/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectorServiceName is the fully-qualified name of the CollectorService service.
	CollectorServiceName = "collector.v1.CollectorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectorServiceGetCollectorProcedure is the fully-qualified name of the CollectorService's
	// GetCollector RPC.
	CollectorServiceGetCollectorProcedure = "/collector.v1.CollectorService/GetCollector"
	// CollectorServiceListCollectorsProcedure is the fully-qualified name of the CollectorService's
	// ListCollectors RPC.
	CollectorServiceListCollectorsProcedure = "/collector.v1.CollectorService/ListCollectors"
	// CollectorServiceCreateCollectorProcedure is the fully-qualified name of the CollectorService's
	// CreateCollector RPC.
	CollectorServiceCreateCollectorProcedure = "/collector.v1.CollectorService/CreateCollector"
	// CollectorServiceUpdateCollectorProcedure is the fully-qualified name of the CollectorService's
	// UpdateCollector RPC.
	CollectorServiceUpdateCollectorProcedure = "/collector.v1.CollectorService/UpdateCollector"
	// CollectorServiceBulkUpdateCollectorsProcedure is the fully-qualified name of the
	// CollectorService's BulkUpdateCollectors RPC.
	CollectorServiceBulkUpdateCollectorsProcedure = "/collector.v1.CollectorService/BulkUpdateCollectors"
	// CollectorServiceBulkDeleteCollectorsProcedure is the fully-qualified name of the
	// CollectorService's BulkDeleteCollectors RPC.
	CollectorServiceBulkDeleteCollectorsProcedure = "/collector.v1.CollectorService/BulkDeleteCollectors"
	// CollectorServiceDeleteCollectorProcedure is the fully-qualified name of the CollectorService's
	// DeleteCollector RPC.
	CollectorServiceDeleteCollectorProcedure = "/collector.v1.CollectorService/DeleteCollector"
	// CollectorServiceListCollectorAttributesProcedure is the fully-qualified name of the
	// CollectorService's ListCollectorAttributes RPC.
	CollectorServiceListCollectorAttributesProcedure = "/collector.v1.CollectorService/ListCollectorAttributes"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	collectorServiceServiceDescriptor                       = v1.File_collector_v1_collector_proto.Services().ByName("CollectorService")
	collectorServiceGetCollectorMethodDescriptor            = collectorServiceServiceDescriptor.Methods().ByName("GetCollector")
	collectorServiceListCollectorsMethodDescriptor          = collectorServiceServiceDescriptor.Methods().ByName("ListCollectors")
	collectorServiceCreateCollectorMethodDescriptor         = collectorServiceServiceDescriptor.Methods().ByName("CreateCollector")
	collectorServiceUpdateCollectorMethodDescriptor         = collectorServiceServiceDescriptor.Methods().ByName("UpdateCollector")
	collectorServiceBulkUpdateCollectorsMethodDescriptor    = collectorServiceServiceDescriptor.Methods().ByName("BulkUpdateCollectors")
	collectorServiceBulkDeleteCollectorsMethodDescriptor    = collectorServiceServiceDescriptor.Methods().ByName("BulkDeleteCollectors")
	collectorServiceDeleteCollectorMethodDescriptor         = collectorServiceServiceDescriptor.Methods().ByName("DeleteCollector")
	collectorServiceListCollectorAttributesMethodDescriptor = collectorServiceServiceDescriptor.Methods().ByName("ListCollectorAttributes")
)

// CollectorServiceClient is a client for the collector.v1.CollectorService service.
type CollectorServiceClient interface {
	// GetCollector returns information about the collector.
	GetCollector(context.Context, *connect.Request[v1.GetCollectorRequest]) (*connect.Response[v1.Collector], error)
	// ListCollectors returns information about all collectors.
	ListCollectors(context.Context, *connect.Request[v1.ListCollectorsRequest]) (*connect.Response[v1.Collectors], error)
	// CreateCollector registers a new collector.
	CreateCollector(context.Context, *connect.Request[v1.CreateCollectorRequest]) (*connect.Response[v1.Collector], error)
	// UpdateCollector updates an existing collector.
	UpdateCollector(context.Context, *connect.Request[v1.UpdateCollectorRequest]) (*connect.Response[v1.Collector], error)
	// BulkUpdateCollectors updates multiple collectors.
	BulkUpdateCollectors(context.Context, *connect.Request[v1.BulkUpdateCollectorsRequest]) (*connect.Response[v1.BulkUpdateCollectorsResponse], error)
	// BulkDeleteCollectors deletes multiple collectors.
	BulkDeleteCollectors(context.Context, *connect.Request[v1.BulkDeleteCollectorsRequest]) (*connect.Response[v1.BulkDeleteCollectorsResponse], error)
	// DeleteCollector deletes an existing collector.
	DeleteCollector(context.Context, *connect.Request[v1.DeleteCollectorRequest]) (*connect.Response[v1.DeleteCollectorResponse], error)
	// ListCollectorAttributes returns all attributes that are used for all collectors.
	ListCollectorAttributes(context.Context, *connect.Request[v1.ListCollectorAttributesRequest]) (*connect.Response[v1.ListCollectorAttributesResponse], error)
}

// NewCollectorServiceClient constructs a client for the collector.v1.CollectorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &collectorServiceClient{
		getCollector: connect.NewClient[v1.GetCollectorRequest, v1.Collector](
			httpClient,
			baseURL+CollectorServiceGetCollectorProcedure,
			connect.WithSchema(collectorServiceGetCollectorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCollectors: connect.NewClient[v1.ListCollectorsRequest, v1.Collectors](
			httpClient,
			baseURL+CollectorServiceListCollectorsProcedure,
			connect.WithSchema(collectorServiceListCollectorsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCollector: connect.NewClient[v1.CreateCollectorRequest, v1.Collector](
			httpClient,
			baseURL+CollectorServiceCreateCollectorProcedure,
			connect.WithSchema(collectorServiceCreateCollectorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCollector: connect.NewClient[v1.UpdateCollectorRequest, v1.Collector](
			httpClient,
			baseURL+CollectorServiceUpdateCollectorProcedure,
			connect.WithSchema(collectorServiceUpdateCollectorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bulkUpdateCollectors: connect.NewClient[v1.BulkUpdateCollectorsRequest, v1.BulkUpdateCollectorsResponse](
			httpClient,
			baseURL+CollectorServiceBulkUpdateCollectorsProcedure,
			connect.WithSchema(collectorServiceBulkUpdateCollectorsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bulkDeleteCollectors: connect.NewClient[v1.BulkDeleteCollectorsRequest, v1.BulkDeleteCollectorsResponse](
			httpClient,
			baseURL+CollectorServiceBulkDeleteCollectorsProcedure,
			connect.WithSchema(collectorServiceBulkDeleteCollectorsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCollector: connect.NewClient[v1.DeleteCollectorRequest, v1.DeleteCollectorResponse](
			httpClient,
			baseURL+CollectorServiceDeleteCollectorProcedure,
			connect.WithSchema(collectorServiceDeleteCollectorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCollectorAttributes: connect.NewClient[v1.ListCollectorAttributesRequest, v1.ListCollectorAttributesResponse](
			httpClient,
			baseURL+CollectorServiceListCollectorAttributesProcedure,
			connect.WithSchema(collectorServiceListCollectorAttributesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectorServiceClient implements CollectorServiceClient.
type collectorServiceClient struct {
	getCollector            *connect.Client[v1.GetCollectorRequest, v1.Collector]
	listCollectors          *connect.Client[v1.ListCollectorsRequest, v1.Collectors]
	createCollector         *connect.Client[v1.CreateCollectorRequest, v1.Collector]
	updateCollector         *connect.Client[v1.UpdateCollectorRequest, v1.Collector]
	bulkUpdateCollectors    *connect.Client[v1.BulkUpdateCollectorsRequest, v1.BulkUpdateCollectorsResponse]
	bulkDeleteCollectors    *connect.Client[v1.BulkDeleteCollectorsRequest, v1.BulkDeleteCollectorsResponse]
	deleteCollector         *connect.Client[v1.DeleteCollectorRequest, v1.DeleteCollectorResponse]
	listCollectorAttributes *connect.Client[v1.ListCollectorAttributesRequest, v1.ListCollectorAttributesResponse]
}

// GetCollector calls collector.v1.CollectorService.GetCollector.
func (c *collectorServiceClient) GetCollector(ctx context.Context, req *connect.Request[v1.GetCollectorRequest]) (*connect.Response[v1.Collector], error) {
	return c.getCollector.CallUnary(ctx, req)
}

// ListCollectors calls collector.v1.CollectorService.ListCollectors.
func (c *collectorServiceClient) ListCollectors(ctx context.Context, req *connect.Request[v1.ListCollectorsRequest]) (*connect.Response[v1.Collectors], error) {
	return c.listCollectors.CallUnary(ctx, req)
}

// CreateCollector calls collector.v1.CollectorService.CreateCollector.
func (c *collectorServiceClient) CreateCollector(ctx context.Context, req *connect.Request[v1.CreateCollectorRequest]) (*connect.Response[v1.Collector], error) {
	return c.createCollector.CallUnary(ctx, req)
}

// UpdateCollector calls collector.v1.CollectorService.UpdateCollector.
func (c *collectorServiceClient) UpdateCollector(ctx context.Context, req *connect.Request[v1.UpdateCollectorRequest]) (*connect.Response[v1.Collector], error) {
	return c.updateCollector.CallUnary(ctx, req)
}

// BulkUpdateCollectors calls collector.v1.CollectorService.BulkUpdateCollectors.
func (c *collectorServiceClient) BulkUpdateCollectors(ctx context.Context, req *connect.Request[v1.BulkUpdateCollectorsRequest]) (*connect.Response[v1.BulkUpdateCollectorsResponse], error) {
	return c.bulkUpdateCollectors.CallUnary(ctx, req)
}

// BulkDeleteCollectors calls collector.v1.CollectorService.BulkDeleteCollectors.
func (c *collectorServiceClient) BulkDeleteCollectors(ctx context.Context, req *connect.Request[v1.BulkDeleteCollectorsRequest]) (*connect.Response[v1.BulkDeleteCollectorsResponse], error) {
	return c.bulkDeleteCollectors.CallUnary(ctx, req)
}

// DeleteCollector calls collector.v1.CollectorService.DeleteCollector.
func (c *collectorServiceClient) DeleteCollector(ctx context.Context, req *connect.Request[v1.DeleteCollectorRequest]) (*connect.Response[v1.DeleteCollectorResponse], error) {
	return c.deleteCollector.CallUnary(ctx, req)
}

// ListCollectorAttributes calls collector.v1.CollectorService.ListCollectorAttributes.
func (c *collectorServiceClient) ListCollectorAttributes(ctx context.Context, req *connect.Request[v1.ListCollectorAttributesRequest]) (*connect.Response[v1.ListCollectorAttributesResponse], error) {
	return c.listCollectorAttributes.CallUnary(ctx, req)
}

// CollectorServiceHandler is an implementation of the collector.v1.CollectorService service.
type CollectorServiceHandler interface {
	// GetCollector returns information about the collector.
	GetCollector(context.Context, *connect.Request[v1.GetCollectorRequest]) (*connect.Response[v1.Collector], error)
	// ListCollectors returns information about all collectors.
	ListCollectors(context.Context, *connect.Request[v1.ListCollectorsRequest]) (*connect.Response[v1.Collectors], error)
	// CreateCollector registers a new collector.
	CreateCollector(context.Context, *connect.Request[v1.CreateCollectorRequest]) (*connect.Response[v1.Collector], error)
	// UpdateCollector updates an existing collector.
	UpdateCollector(context.Context, *connect.Request[v1.UpdateCollectorRequest]) (*connect.Response[v1.Collector], error)
	// BulkUpdateCollectors updates multiple collectors.
	BulkUpdateCollectors(context.Context, *connect.Request[v1.BulkUpdateCollectorsRequest]) (*connect.Response[v1.BulkUpdateCollectorsResponse], error)
	// BulkDeleteCollectors deletes multiple collectors.
	BulkDeleteCollectors(context.Context, *connect.Request[v1.BulkDeleteCollectorsRequest]) (*connect.Response[v1.BulkDeleteCollectorsResponse], error)
	// DeleteCollector deletes an existing collector.
	DeleteCollector(context.Context, *connect.Request[v1.DeleteCollectorRequest]) (*connect.Response[v1.DeleteCollectorResponse], error)
	// ListCollectorAttributes returns all attributes that are used for all collectors.
	ListCollectorAttributes(context.Context, *connect.Request[v1.ListCollectorAttributesRequest]) (*connect.Response[v1.ListCollectorAttributesResponse], error)
}

// NewCollectorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectorServiceHandler(svc CollectorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectorServiceGetCollectorHandler := connect.NewUnaryHandler(
		CollectorServiceGetCollectorProcedure,
		svc.GetCollector,
		connect.WithSchema(collectorServiceGetCollectorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectorServiceListCollectorsHandler := connect.NewUnaryHandler(
		CollectorServiceListCollectorsProcedure,
		svc.ListCollectors,
		connect.WithSchema(collectorServiceListCollectorsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectorServiceCreateCollectorHandler := connect.NewUnaryHandler(
		CollectorServiceCreateCollectorProcedure,
		svc.CreateCollector,
		connect.WithSchema(collectorServiceCreateCollectorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectorServiceUpdateCollectorHandler := connect.NewUnaryHandler(
		CollectorServiceUpdateCollectorProcedure,
		svc.UpdateCollector,
		connect.WithSchema(collectorServiceUpdateCollectorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectorServiceBulkUpdateCollectorsHandler := connect.NewUnaryHandler(
		CollectorServiceBulkUpdateCollectorsProcedure,
		svc.BulkUpdateCollectors,
		connect.WithSchema(collectorServiceBulkUpdateCollectorsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectorServiceBulkDeleteCollectorsHandler := connect.NewUnaryHandler(
		CollectorServiceBulkDeleteCollectorsProcedure,
		svc.BulkDeleteCollectors,
		connect.WithSchema(collectorServiceBulkDeleteCollectorsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectorServiceDeleteCollectorHandler := connect.NewUnaryHandler(
		CollectorServiceDeleteCollectorProcedure,
		svc.DeleteCollector,
		connect.WithSchema(collectorServiceDeleteCollectorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	collectorServiceListCollectorAttributesHandler := connect.NewUnaryHandler(
		CollectorServiceListCollectorAttributesProcedure,
		svc.ListCollectorAttributes,
		connect.WithSchema(collectorServiceListCollectorAttributesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/collector.v1.CollectorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectorServiceGetCollectorProcedure:
			collectorServiceGetCollectorHandler.ServeHTTP(w, r)
		case CollectorServiceListCollectorsProcedure:
			collectorServiceListCollectorsHandler.ServeHTTP(w, r)
		case CollectorServiceCreateCollectorProcedure:
			collectorServiceCreateCollectorHandler.ServeHTTP(w, r)
		case CollectorServiceUpdateCollectorProcedure:
			collectorServiceUpdateCollectorHandler.ServeHTTP(w, r)
		case CollectorServiceBulkUpdateCollectorsProcedure:
			collectorServiceBulkUpdateCollectorsHandler.ServeHTTP(w, r)
		case CollectorServiceBulkDeleteCollectorsProcedure:
			collectorServiceBulkDeleteCollectorsHandler.ServeHTTP(w, r)
		case CollectorServiceDeleteCollectorProcedure:
			collectorServiceDeleteCollectorHandler.ServeHTTP(w, r)
		case CollectorServiceListCollectorAttributesProcedure:
			collectorServiceListCollectorAttributesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectorServiceHandler struct{}

func (UnimplementedCollectorServiceHandler) GetCollector(context.Context, *connect.Request[v1.GetCollectorRequest]) (*connect.Response[v1.Collector], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collector.v1.CollectorService.GetCollector is not implemented"))
}

func (UnimplementedCollectorServiceHandler) ListCollectors(context.Context, *connect.Request[v1.ListCollectorsRequest]) (*connect.Response[v1.Collectors], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collector.v1.CollectorService.ListCollectors is not implemented"))
}

func (UnimplementedCollectorServiceHandler) CreateCollector(context.Context, *connect.Request[v1.CreateCollectorRequest]) (*connect.Response[v1.Collector], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collector.v1.CollectorService.CreateCollector is not implemented"))
}

func (UnimplementedCollectorServiceHandler) UpdateCollector(context.Context, *connect.Request[v1.UpdateCollectorRequest]) (*connect.Response[v1.Collector], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collector.v1.CollectorService.UpdateCollector is not implemented"))
}

func (UnimplementedCollectorServiceHandler) BulkUpdateCollectors(context.Context, *connect.Request[v1.BulkUpdateCollectorsRequest]) (*connect.Response[v1.BulkUpdateCollectorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collector.v1.CollectorService.BulkUpdateCollectors is not implemented"))
}

func (UnimplementedCollectorServiceHandler) BulkDeleteCollectors(context.Context, *connect.Request[v1.BulkDeleteCollectorsRequest]) (*connect.Response[v1.BulkDeleteCollectorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collector.v1.CollectorService.BulkDeleteCollectors is not implemented"))
}

func (UnimplementedCollectorServiceHandler) DeleteCollector(context.Context, *connect.Request[v1.DeleteCollectorRequest]) (*connect.Response[v1.DeleteCollectorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collector.v1.CollectorService.DeleteCollector is not implemented"))
}

func (UnimplementedCollectorServiceHandler) ListCollectorAttributes(context.Context, *connect.Request[v1.ListCollectorAttributesRequest]) (*connect.Response[v1.ListCollectorAttributesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("collector.v1.CollectorService.ListCollectorAttributes is not implemented"))
}
